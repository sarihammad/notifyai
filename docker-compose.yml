version: "3.8"

services:
  # Redis for queue and caching
  redis:
    image: redis:7-alpine
    container_name: ai-notifier-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # AI Notifier application
  notifier:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-notifier-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Commander for monitoring (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-notifier-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: ai-notifier-network
